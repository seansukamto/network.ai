version: "3.8"

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: ankane/pgvector:latest
    container_name: network-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: networking_app
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j graph database
  neo4j:
    image: neo4j:5.12
    container_name: network-neo4j
    environment:
      NEO4J_AUTH: neo4j/test
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "test", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (optional - can run locally for development)
  backend:
    build:
      context: ../apps/backend
      dockerfile: Dockerfile
    container_name: network-backend
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/networking_app
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: test
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      PORT: 3001
      FRONTEND_URL: http://localhost:5173
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:

